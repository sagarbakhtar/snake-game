{"version":3,"sources":["helper-functions.js","snake-game-board.js","index.js"],"names":["verifyIfPositionInSnakeBody","i","j","snakePositions","k","length","_snakePositions$k","Object","slicedToArray","positionI","positionJ","BoardCell","props","react_default","a","createElement","className","snakeBodyClass","foodClass","Board","this","foodPosition","key","boardCells","push","renderBoardCell","React","Component","SnakeGame","_this","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","direction","isGameOver","isGameRunning","changeSnakePosition","bind","assertThisInitialized","onKeyDown","newPosition","currentPosition","getNewPosition","consumeFood","slicedSnake","slice","verifyIsGameOver","newSnakePositions","concat","newFoodPosition","currentFoodPostion","gotPosition","positioinI","Math","floor","random","getNewFoodPosition","setState","event","keyCode","setInterval","document","addEventListener","_this2","score","onClick","resetGame","startGame","snake_game_board_Board","ReactDOM","render","src_SnakeGame","getElementById"],"mappings":"sPAAaA,EAA8B,SAACC,EAAEC,EAAEC,GAC9C,IAAI,IAAIC,EAAI,EAAGA,EAAID,EAAeE,OAAQD,IAAI,KAAAE,EAAAC,OAAAC,EAAA,EAAAD,CACbJ,EAAeC,GADF,GACrCK,EADqCH,EAAA,GAC1BI,EAD0BJ,EAAA,GAE5C,GAAIL,IAAMQ,GAAaP,IAAMQ,EAC3B,OAAO,EAEX,OAAO,GCHT,SAASC,EAAWC,GAClB,OACEC,EAAAC,EAAAC,cAAA,OACEC,UAAW,yBAA4BJ,EAAMK,eAAe,IAAIL,EAAMM,gBAKvDC,0LACHlB,EAAEC,GAEhB,IAAMC,EAAiBiB,KAAKR,MAAMT,eAC5BkB,EAAeD,KAAKR,MAAMS,aAC5BJ,EAAiBjB,EAA4BC,EAAEC,EAAEC,GAAkB,aAAe,GAClFe,EAAajB,IAAMoB,EAAa,IAAMnB,IAAMmB,EAAa,GAAM,aAAe,GAElF,OACER,EAAAC,EAAAC,cAACJ,EAAD,CACEW,IAAK,QAAQrB,EAAE,IAAIC,EACnBe,eAAkBA,EAClBC,UAAaA,qCAMjB,IADA,IAAMK,EAAa,GACXtB,EAAI,EAAGA,GAAK,GAAIA,IAEtB,IAAI,IAAIC,EAAI,EAAGA,GAAK,GAAIA,IAEtBqB,EAAWC,KAAKJ,KAAKK,gBAAgBxB,EAAEC,IAG3C,OACEW,EAAAC,EAAAC,cAAA,OAAKC,UAAU,oBACZO,UA3B0BG,IAAMC,WCLnCC,cACJ,SAAAA,EAAYhB,GACZ,IAAAiB,EAAA,OAAAtB,OAAAuB,EAAA,EAAAvB,CAAAa,KAAAQ,IACEC,EAAAtB,OAAAwB,EAAA,EAAAxB,CAAAa,KAAAb,OAAAyB,EAAA,EAAAzB,CAAAqB,GAAAK,KAAAb,KAAMR,KACDsB,MAAQ,CACX/B,eAAiB,CAAC,CAAC,EAAE,GAAG,CAAC,EAAE,GAAG,CAAC,EAAE,GAAG,CAAC,EAAE,IACvCkB,aAAe,CAAC,GAAG,IACnBc,UAAW,OACXC,YAAY,EACZC,eAAe,GAEjBR,EAAKS,oBAAsBT,EAAKS,oBAAoBC,KAAzBhC,OAAAiC,EAAA,EAAAjC,QAAAiC,EAAA,EAAAjC,CAAAsB,KAC3BA,EAAKY,UAAYZ,EAAKY,UAAUF,KAAfhC,OAAAiC,EAAA,EAAAjC,QAAAiC,EAAA,EAAAjC,CAAAsB,KAVnBA,qFAaE,GAAIT,KAAKc,MAAME,aAAehB,KAAKc,MAAMG,cACrC,OAAO,KACX,IAAIlC,EAAiBiB,KAAKc,MAAM/B,eAC1BkB,EAAeD,KAAKc,MAAMb,aAE1BqB,EFjBoB,SAACC,EAAiBR,GAC9C,IAAIO,EAAc,GAClB,OAAQP,GACN,IAAK,KACHO,EAAY,GAAKC,EAAgB,GAAK,EACtCD,EAAY,GAAKC,EAAgB,GACjC,MACF,IAAK,OACHD,EAAY,GAAKC,EAAgB,GAAK,EACtCD,EAAY,GAAKC,EAAgB,GACjC,MACF,IAAK,OACHD,EAAY,GAAKC,EAAgB,GACjCD,EAAY,GAAKC,EAAgB,GAAK,EACtC,MACF,IAAK,QACHD,EAAY,GAAKC,EAAgB,GACjCD,EAAY,GAAKC,EAAgB,GAAK,EAI1C,OAAOD,EEJeE,CADEzC,EAAe,GACYiB,KAAKc,MAAMC,WACtDU,EAAcH,EAAY,KAAOrB,EAAa,IAAMqB,EAAY,KAAOrB,EAAa,GACpFyB,EAAcD,EAAc1C,EAAiBA,EAAe4C,MAAM,GAAG,GACrEX,EFkBsB,SAACM,EAAavC,GAC5C,OAAGuC,EAAY,GAAK,GAAKA,EAAY,GAAK,IAAMA,EAAY,GAAK,GAAKA,EAAY,GAAK,MAEnF1C,EAA4B0C,EAAY,GAAIA,EAAY,GAAIvC,GErB3C6C,CAAiBN,EAAaI,GAC3CG,EAAoB,CAACP,GAAaQ,OAAOJ,GACzCK,EAAkBN,EFEM,SAACO,EAAoBjD,GACrD,IAAIkD,EACAC,EACA5C,EACJ,GACE4C,EAAaC,KAAKC,MAAuB,GAAhBD,KAAKE,SAAiB,GAC/C/C,EAAY6C,KAAKC,MAAuB,GAAhBD,KAAKE,SAAiB,GAC9CJ,EAAcrD,EAA4BsD,EAAY5C,EAAWP,SAE7DkD,GAEN,MAAO,CAACC,EAAY5C,GEboBgD,CAAmBrC,EAAc4B,GAAqB5B,EAC5FD,KAAKuC,SAAS,CACZxD,eAAiB8C,EACjB5B,aAAc8B,EACdf,WAAYA,sCAGNwB,GACR,IAAIzB,EAAYf,KAAKc,MAAMC,UAC3B,OAAQyB,EAAMC,SACZ,KAAK,GACc,UAAd1B,IACDA,EAAY,QACd,MACF,KAAK,GACc,SAAdA,IACDA,EAAY,MACd,MACF,KAAK,GACc,SAAdA,IACDA,EAAY,SACd,MACF,KAAK,GACc,OAAdA,IACDA,EAAY,QAGdf,KAAKc,MAAMC,YAAcA,GAC3Bf,KAAKuC,SAAS,CAACxB,UAAYA,GAAYf,KAAKkB,iEAI9CwB,YAAY1C,KAAKkB,oBAAoB,KACrCyB,SAASC,iBAAiB,UAAW5C,KAAKqB,+CAG1CrB,KAAKuC,SAAS,CACZxD,eAAiB,CAAC,CAAC,EAAE,GAAG,CAAC,EAAE,GAAG,CAAC,EAAE,GAAG,CAAC,EAAE,IACvCkB,aAAe,CAAC,GAAG,IACnBc,UAAW,OACXC,YAAY,wCAIdhB,KAAKuC,SAAS,CACZtB,eAAe,qCAGX,IAAA4B,EAAA7C,KACA8C,EAAQ9C,KAAKc,MAAM/B,eAAeE,OAAS,EAC3C+B,EAAahB,KAAKc,MAAME,WAC9B,OACEvB,EAAAC,EAAAC,cAAA,OAAKC,UAAW,cAAgBoB,EAAa,aAAe,KAC1DvB,EAAAC,EAAAC,cAAA,MAAIC,UAAU,gBAAd,eACAH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,gBAAd,UAAqCkD,GACrCrD,EAAAC,EAAAC,cAAA,WACIK,KAAKc,MAAME,YACXvB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,qBACbH,EAAAC,EAAAC,cAAA,uBACAF,EAAAC,EAAAC,cAAA,UAAQoD,QAAS,kBAAMF,EAAKG,cAA5B,aAIDhD,KAAKc,MAAMG,eACZxB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,sBACbH,EAAAC,EAAAC,cAAA,UAAQoD,QAAS,kBAAMF,EAAKI,cAA5B,eAGJxD,EAAAC,EAAAC,cAACuD,EAAD,CACEnE,eAAkBiB,KAAKc,MAAM/B,eAC7BkB,aAAgBD,KAAKc,MAAMb,wBA/FfK,IAAMC,WAwG9B4C,IAASC,OACP3D,EAAAC,EAAAC,cAAC0D,EAAD,MACAV,SAASW,eAAe","file":"static/js/main.2cb116a8.chunk.js","sourcesContent":["export const verifyIfPositionInSnakeBody = (i,j,snakePositions) => {\n  for(let k = 0; k < snakePositions.length; k++){\n    const [positionI, positionJ] = snakePositions[k];\n    if (i === positionI && j === positionJ)\n      return true;\n  }\n  return false;\n}\n\nexport const getNewPosition = (currentPosition, direction) => {\n  let newPosition = [];\n  switch (direction) {\n    case 'up':\n      newPosition[0] = currentPosition[0] - 1;\n      newPosition[1] = currentPosition[1];\n      break;\n    case 'down':\n      newPosition[0] = currentPosition[0] + 1;\n      newPosition[1] = currentPosition[1];\n      break;\n    case 'left':\n      newPosition[0] = currentPosition[0];\n      newPosition[1] = currentPosition[1] - 1;\n      break;\n    case 'right':\n      newPosition[0] = currentPosition[0];\n      newPosition[1] = currentPosition[1] + 1;\n      break;\n  }\n\n  return newPosition;\n}\n\nexport const getNewFoodPosition = (currentFoodPostion, snakePositions) => {\n  let gotPosition;\n  let positioinI;\n  let positionJ\n  do{\n    positioinI = Math.floor((Math.random() * 20) + 1);\n    positionJ = Math.floor((Math.random() * 20) + 1);\n    gotPosition = verifyIfPositionInSnakeBody(positioinI, positionJ, snakePositions);\n  }\n  while(gotPosition);\n\n  return [positioinI, positionJ];\n}\n\nexport const verifyIsGameOver = (newPosition, snakePositions) => {\n  if(newPosition[0] < 1 || newPosition[0] > 20 || newPosition[1] < 1 || newPosition[1] > 20)\n    return true;\n  if (verifyIfPositionInSnakeBody(newPosition[0], newPosition[1], snakePositions))\n      return true;\n\n  return false;\n}\n","import React from 'react';\nimport {verifyIfPositionInSnakeBody} from './helper-functions.js';\n\nfunction BoardCell (props){\n  return (\n    <div\n      className={'snake-game-board-cell'+' '+props.snakeBodyClass+' '+props.foodClass}\n    />\n  );\n}\n\nexport default class Board extends React.Component {\n  renderBoardCell(i,j)\n  {\n    const snakePositions = this.props.snakePositions;\n    const foodPosition = this.props.foodPosition;\n    let snakeBodyClass = verifyIfPositionInSnakeBody(i,j,snakePositions) ? 'snake-body' : '';\n    let foodClass = (i === foodPosition[0] && j === foodPosition[1]) ? 'snake-food' : '';\n\n    return (\n      <BoardCell\n        key={'cell-'+i+'-'+j}\n        snakeBodyClass = {snakeBodyClass}\n        foodClass = {foodClass}\n      />\n    );\n  }\n  render (){\n    const boardCells = [];\n    for(let i = 1; i <= 20; i++)\n    {\n      for(let j = 1; j <= 20; j++)\n      {\n        boardCells.push(this.renderBoardCell(i,j));\n      }\n    }\n    return (\n      <div className='snake-game-board'>\n        {boardCells}\n      </div>\n    );\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Board from './snake-game-board.js';\nimport {verifyIfPositionInSnakeBody, getNewPosition, getNewFoodPosition, verifyIsGameOver} from './helper-functions.js';\n\nclass SnakeGame extends React.Component {\n  constructor(props)\n  {\n    super(props);\n    this.state = {\n      snakePositions : [[5,6],[4,6],[3,6],[2,6]],\n      foodPosition : [12,18],\n      direction: 'down',\n      isGameOver: false,\n      isGameRunning: false\n    };\n    this.changeSnakePosition = this.changeSnakePosition.bind(this);\n    this.onKeyDown = this.onKeyDown.bind(this);\n  }\n  changeSnakePosition(){\n    if (this.state.isGameOver || !this.state.isGameRunning)\n        return null;\n    let snakePositions = this.state.snakePositions;\n    const foodPosition = this.state.foodPosition;\n    const firstPosition = snakePositions[0];\n    const newPosition = getNewPosition(firstPosition,this.state.direction);\n    const consumeFood = newPosition[0] === foodPosition[0] && newPosition[1] === foodPosition[1];\n    const slicedSnake = consumeFood ? snakePositions : snakePositions.slice(0,-1);\n    const isGameOver = verifyIsGameOver(newPosition, slicedSnake);\n    const newSnakePositions = [newPosition].concat(slicedSnake);\n    const newFoodPosition = consumeFood ? getNewFoodPosition(foodPosition, newSnakePositions) : foodPosition;\n    this.setState({\n      snakePositions : newSnakePositions,\n      foodPosition: newFoodPosition,\n      isGameOver: isGameOver\n    });\n  }\n  onKeyDown(event){\n    let direction = this.state.direction;\n    switch (event.keyCode) {\n      case 37:\n        if(direction !== 'right')\n          direction = 'left';\n        break;\n      case 38:\n        if(direction !== 'down')\n          direction = 'up';\n        break;\n      case 39:\n        if(direction !== 'left')\n          direction = 'right';\n        break;\n      case 40:\n        if(direction !== 'up')\n          direction = 'down';\n        break;\n    }\n    if (this.state.direction !== direction){\n      this.setState({direction : direction}, this.changeSnakePosition);\n    }\n  }\n  componentDidMount(){\n    setInterval(this.changeSnakePosition,500);\n    document.addEventListener(\"keydown\", this.onKeyDown);\n  }\n  resetGame(){\n    this.setState({\n      snakePositions : [[5,6],[4,6],[3,6],[2,6]],\n      foodPosition : [12,18],\n      direction: 'down',\n      isGameOver: false\n    });\n  }\n  startGame(){\n    this.setState({\n      isGameRunning: true\n    });\n  }\n  render(){\n    const score = this.state.snakePositions.length - 4;\n    const isGameOver = this.state.isGameOver;\n    return (\n      <div className={'snake-game' + (isGameOver ? ' game-over' : '')}>\n        <h1 className='game-heading'> Snake Game</h1>\n        <h3 className='game-heading'> Score {score}</h3>\n        <div>\n          { this.state.isGameOver &&\n            <div className='game-over-heading'>\n              <h2>Game Over</h2>\n              <button onClick={() => this.resetGame()}>Restart</button>\n            </div>\n          }\n\n          { !this.state.isGameRunning &&\n            <div className='game-start-heading'>\n              <button onClick={() => this.startGame()}>Start Game</button>\n            </div>\n          }\n          <Board\n            snakePositions = {this.state.snakePositions}\n            foodPosition = {this.state.foodPosition}\n          />\n        </div>\n      </div>\n    );\n  }\n}\n\n// ======================\nReactDOM.render(\n  <SnakeGame />,\n  document.getElementById('root')\n);\n\n/*\nfunction verifyIfPositionInSnakeBody (i,j,snakePositions){\n  for(let k = 0; k < snakePositions.length; k++){\n    const [positionI, positionJ] = snakePositions[k];\n    if (i === positionI && j === positionJ)\n      return true;\n  }\n  return false;\n}\n\nfunction getNewPosition (currentPosition, direction){\n  let newPosition = [];\n  switch (direction) {\n    case 'up':\n      newPosition[0] = currentPosition[0] - 1;\n      newPosition[1] = currentPosition[1];\n      break;\n    case 'down':\n      newPosition[0] = currentPosition[0] + 1;\n      newPosition[1] = currentPosition[1];\n      break;\n    case 'left':\n      newPosition[0] = currentPosition[0];\n      newPosition[1] = currentPosition[1] - 1;\n      break;\n    case 'right':\n      newPosition[0] = currentPosition[0];\n      newPosition[1] = currentPosition[1] + 1;\n      break;\n  }\n\n  return newPosition;\n}\n\nfunction getNewFoodPosition (currentFoodPostion, snakePositions){\n  let gotPosition;\n  let positioinI;\n  let positionJ\n  do{\n    positioinI = Math.floor((Math.random() * 20) + 1);\n    positionJ = Math.floor((Math.random() * 20) + 1);\n    gotPosition = verifyIfPositionInSnakeBody(positioinI, positionJ, snakePositions);\n  }\n  while(gotPosition);\n\n  return [positioinI, positionJ];\n}\n\nfunction verifyIsGameOver(newPosition, snakePositions) {\n  if(newPosition[0] < 1 || newPosition[0] > 20 || newPosition[1] < 1 || newPosition[1] > 20)\n    return true;\n  if (verifyIfPositionInSnakeBody(newPosition[0], newPosition[1], snakePositions))\n      return true;\n\n  return false;\n}\n*/\n"],"sourceRoot":""}